Data Model Description
Project: o-events.net

NOTE: The models are spelled with CapitalLetters here and in the diagram, but with_underscores in the actual application.
      Also, i18n of event-specific strings is not implemented in the DB structure (yet).

==
AdditionalFee: Fees for additional services which do not depend on the Competitors' age, Category, or other parameters. Example: Set of training maps provided by the organizer.
  name:string          The name of the fee, as determined by the event organizer.
  description:string   A short description of the fee. 
  amount:decimal       The fee (in the event's main currency).
  event:ref            The event that the fee belongs to.
  age_range:ref        The age range that the fee applies to. Zero for team events.
==
AgeRange: Range used to define StartFees depending on age. Note that this can only be used for single events, since the age of a Team is not defined otherwise.
  lower:integer        The lower end of the age range.
  upper:integer        The upper end of the age range. 99 is treated as infinity.
  belongs_to:string    Either 'start_fee' or 'additional_fee'. Used to list an event's age ranges for start and additional fees separately.
  event:ref            The event that the range is used in.
==
Category: Group of Teams which compete against each other. Each Competition generates an overall result list (TotalResult) for each Category. A Category may limit the age and sex of Competitors, or the total age of Teams that are allowed to compete in it. The Category usually determines the length of the courses to be run throughout an Event.
  name:string            The name of the category, as displayed to the user.
  slug:string            A unique category name consisting only of latin letters and digits. (Use in URLs and maybe in export files.)
  min_age:integer        The minimum total age of a team's competitors in order to join this category.
  max_age:integer        The maximum total age of a team's competitors in order to join this category. 99 will be treated as infinity.
  sex:string             Determines whether this category is for men ('M'), women ('F'), or open ('O'). Categories with 'M' are open for women as well, but 'O' expresses that the category is really intended for everyone.
  min_team_size:integer  The minimum number of competitors in teams competing in this category. This is only enforced during registration if the organizer choses to, otherwise incomplete teams are accepted with a warning message.  
  max_team_size:integer  The maximum number of competitors in teams competing in this category.
  team_pool:ref          The team pool that the category belongs to.
  category_group:ref     The category group that the category is part of.
==
CategoryGroup: Group of Categories which have the same StartFees.
  fee_age_dependent:boolean     Determines whether the start fee in this category depends on age. This is used e.g. for "open" categories where people of any age are allowed to start.
  <no references>
==
Chip: A chip number used by a competitor in a run. Note a chip may be used several times within the same run, which will result in several Chip entities within that run. 
  number:integer     The chip number. May be the number of a SPORTident chip or any other chip with an integer number.
  run:ref            The run that this chip is being used in.
  competitor:ref     The competitor who is using this chip in the specified run.
  [result:ref]       The result that was generated in the specified run, by the specified competitor, using this chip. (Foreign key in other table)
==
Club: Group of Users. Each User can be a member of several Clubs, one of which is the User's default Club (isDefault = true). Club members can have special rights, e.g. the right to add teams to Club registrations.
  name:string            The name of the club. O-events.net does not split up club names.
  address_line_1:string  Self-explanatory...
  address_line_2:string
  zipcode:string
  city:string
  website:string
  country:ref            The country in which the club is domiciled.
=
ClubMember: A user who has joined a club.
  is_default:boolean    Determines whether a club is the user's default club. May only be true for ONE of each user's clubs.
  role:integer          Determines the rights a member has within a club.
  user:ref              The user who has joined a club.
  club:ref              The club of which this user is a member.
==
CompetingClub: Club that is competing in an Event. Each Competitor may be assigned at most one CompetingClub, i.e. the User must choose which Club to run for when registering for an Event. It is possible to compete without joining a Club.
  name:string            The name of the club. O-events.net does not split up club names.
  address_line_1:string  Self-explanatory...
  address_line_2:string
  zipcode:string
  city:string
  website:string
  country:ref            The country in which the club is domiciled.
  club:ref               The club that this competing club is a copy of. Will be set to zero if a club is deleted.
  NOTE: CompetingClubs do not reference an event directly, they are only linked to it via the competitors.
==
CompetitionGroup: A group of Competitions which have the same StartFees. CompetitionGroups may consist of a single Competition.
  <no attributes>
  team_pool:ref         The TeamPool that this CompetitionGroup is part of.
==
Competition: A group of Runs that has a TotalResult. An Event can consist of several Competitions if it is e.g. a multi-day Event with daily prize giving.
Note that a competition does not have a date; its start and end date is the date of the first and last run, respectively.
  name:string           The name of the competition. May be empty if the event has only one competition.
  kind:string           Determines how the event data is interpreted: 'single' (one competitor per team), 'relay' (one competitor per run), or 'team' (all competitors do all runs)
  event:ref             The event that the competition belongs to.
  competition_group:ref The competition group that the competition belongs to.
==
Competitor: A User who competes in an Event.
  license_number:string     Country-specific identification number or character code. This is where the "SOLV Number" is stored for Swiss competitors.
  region_code:string        Country-specific identifier of the competitor's residential region.
  first_name:string         Self-explanatory...
  last_name:string
  email:string
  phone:string
  address_line_1:string
  address_line_2:string
  zipcode:string
  city:string
  province:string           State, province, canton etc. (may be part of the postal address)
  sex:string                'M' or 'F'  
  birthdate_y:integer       Four-digit year of birth. This is stored separately from the date since the date may not always be available.
  birthdate_m:integer       Month of birth.
  birthdate_d:integer       Day of birth.
  sortkey:integer           Determines the order of the competitors in a team. This is especially important in relay events, where the runs are assigned to team members in this order.
  num1:integer                Custom data as defined by the organizer
  num2:integer
  num3:integer
  text1:string
  text2:string
  text3:string
  flag1:boolean
  flag2:boolean
  flag3:boolean
  country:ref               Country of residence.
  nation:ref                Country represented by the competitor.
  team_pool:ref             The TeamPool that the competitor is a part of.
  competing_club:ref        The club that this competitor represents (in the current event).        
  user:ref                  The user that this competitor is a copy of. This reference is zero if a competitor was registered by another user, and is set to zero when the linked user is deleted.  
==
Country: A political country, as used for postal addresses.
  name:string               Name of the country.
  iso_code:string           Country code according to ISO 3166 Alpha-2 (see http://en.wikipedia.org/wiki/ISO_3166-1)
  ioc_code:string           Olympic country code according to this list: http://en.wikipedia.org/wiki/List_of_IOC_country_codes
==
CountryGroup: Used to define StartFees that depend on the Team's country. A CountryGroup is a group of countries with the same StartFees.
  <no attributes>
  event:ref       The event that the CountryGroup belongs to.
  countries:n-to-n  The countries that belong to this country group.
==
Currency: A currency used for payments by an event.
  name:string               The name of the currency, e.g. "Canadian Dollar"
  iso_code:string           The currency code according to this list: http://en.wikipedia.org/wiki/ISO_4217
  <TODO> Somehow manage to display the currency in a localized fashion. Try to use Rails i18n features for this.
==
Event: Represents an orienteering event.
  name:string          The name of the event, to be displayed in the calendar, page title, and other places.
  slug:string          Event name to be used in URLs, consisting of only latin letters and digits. Must be unique. (The term "slug" is used for this in WordPress.)
  start_date:date      Start date of the event (does not need to match the date of the first run)
  end_date:date        End date of the event (does not need to match the date of the last run)
  club:ref             The organizer of the event.  
  country:ref          Country under which the event should be listed. The country of the organizing is used by default, but other countries can be chosen.
  currency:ref         The event's official currency. All start fees are defined in this currency, and (currently) have to be paid in this currency.
  language:n-to-n      The languages in which the event website is available.
==
EventSetting: A configuration setting in the current event. See event_settings.txt for definitions.
  name:string       The name of the setting.
  value:string      The value of the setting. Some settings may contain marshaled arrays, although this should be avoided if possible.
  event:ref         The event for which this setting is valid.
==
Language: A language in which some of the site content is available.
  english_name:string     The English name of this language.
  native_name:string      The name of this language in this language. Note that other translations of the language name may be provided through the i18n system - they are available here: http://en.wikipedia.org/wiki/ISO_639-1_language_matrix.
  iso_code:string         The ISO 639-1 two-letter code of the language. See http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
  event:n-to-n            The events whose website is available in this language.
==
Log: Chronological list of modifications in the other database tables. Logging may be limited to important transactions (e.g. payments) as soon as the software becomes stable.
  <TODO>
==
Payment: Represents a payment from the user to o-events.net using either an e-payment platform or a Swiss ESR payment slip. (All payments are processed automatically.)
All payments must be made in Swiss francs (using current exchange rates, only if accepted by the organizer) or in the event's official currency.
  reference_number:string     The ESR or E-Payment reference number.
  valuta:date                 The date on which the money is transferred.
  fees_valuta:date            The date on which the fees are debited from the account of supsport.ch.
  registration_time:datetime  A timestamp of the instant when the payment is registered in the O-events.net system.
  security_data:string        A collection of header data used to track fradulent users of the payment system. Contains IP address, browser version, and other information.
  method:string               Method of payment, e.g. one of 'esr','postfinance_card','postfinance_efinance','paypal'
  fees:decimal                The fees which have to be paid to the payment service provider for this payment.
  fees_included:boolean       Determines whether the fees are included in the debit_amount. If this is false, the organizer covers the fees.
  debit_amount:decimal        The amount of money that is debited to the user's bank or credit card account.
                              Note: The amount that gets credited to the organizer is debit_amount minus fees! (If the organizer does not cover transaction fees, this is equal to the StartFees.)
                                    The amount of StartFees that the user has paid is debit_amount if fees_included is true, and debit_amount minus fees otherwise.
  payment_group:ref           The payment group to whose balance this payment contributes. Payments are linked to Users only through PaymentGroups.
  currency:ref                The currency in which the payment has been made.
== 
PaymentGroup: A group of Teams within the same event whose StartFees are paid by the same User.
PaymentGroups are created when teams are registered, unless they are registered through a club. PaymentGroups for club registrations are created when the bill is closed.
  is_closed:boolean            This flag is set when the user has closed the PaymentGroup by converting it into a "pending bill". If the flag is set, the teams in this group may no longer be deleted, and changes which influence the start fees are no longer allowed.
  closing_time:datetime        A timestamp of the instant when the is_closed flag of the PaymentGroup was set to true.
  exchange_rate:decimal        The price of one <Event's official currency> in Swiss Francs at the closing_time. This exchange rate is used to calculate the owed amount if the bill is paid in Swiss Francs.
  is_paper_bill:boolean        This flag is set when the user selects "bill by mail" as a method of payment. In this case, the payment page can no longer be accessed, and only Swiss ESR payments are accepted. The organizer cannot override this setting!
  is_paper_bill_sent:boolean   This flag can be set by the bill administrator to notify the user that their bill has been printed and mailed. It can also be used internally to keep track of the bills that still need to be printed.
  is_paid:boolean              This flag is set when the sum of payments linked to this payment group is larger or equal to the sum of start fees of all the teams in this payment group.
                               Note that transaction fees may be relevant for this comparison: If the organizer does not cover fees, the sum of (debit_amount -  fees) must be >= the sum of start fees
                               Also note that payments may be in Swiss Francs or the event's currency, whereas StartFees are always in the event's currency. 
==
RegistrationDeadline: A date that is relevant to an Event's StartFees. The online registration of an Event is open until its latest deadline, but the StartFees may be increased over time, to give Competitors an incentive to register early.
  date:date           The deadline.
  event:ref           The event that the deadline belongs to.
==
Result: A dataset that represents the performance of a Competitor or Team in a particular Run. This data is used to create the result lists of a Run.
In relay competitions, the Result represents one leg, and the competition's TotalResult represents the Team's total time for the relay. In team competitions, the team's result is linked to the team leader.
  <TODO> This should contain much more data, e.g. finish times from several timing systems, raw chip data, chip reading timestamp etc. However this is irrelevant for the web application. 
  start_time:integer  The start time. Time format: milliseconds since midnight
  finish_time:integer The finish time. Time format: milliseconds since midnight
  run_time:integer    The run time from start to finish. Time format: milliseconds
  rank:integer        The rank of the Competitor on the Run's result list.
  chip:ref            The chip that this result was read from.
==
Run: A part of a Competition which involves one passing of start and finish per Team. In relay events, a Run represents a relay leg, and age restrictions can be defined for each Run. In individual events, a Run may represent a day of a multi-day event.
  name:string          The name of the run. May be blank if the competition contains only one run, or if the competition is a relay.
  date:date            The date on which the run takes place.
  age_limit_1:integer  Defines the maximum age of junior competitors (below 21) who may participate in the run. Values over 20 indicate no limit. 
  age_limit_2:integer  Defines the minimum age of senior competitors (above 35) who may participate in the run. Value below 35 indicate no limit.
  competition:ref      The competition that the run belongs to.
  sortkey:integer      Defines the order in which the runs are held. (This is not necessarily specified by the date, since several runs may take place on the same day.)
==
SplitTime: The run time between two controls in an orienteering competition, or e.g. a lap time in a running competition.
  control_number:integer        The control punched after this SplitTime.
  split_time:integer            The time elapsed between the previous control and the current control in milliseconds.
  result:ref                    The result that this SplitTime belongs to.
==
StartBlock: A time block within which a competitor starts in a run. This may be specified by the competitor or generated by the organizer, depending on the competition's rules.
NOTE: StartBlocks have the same references as StartTimes, but they are not generated at the same time. Therefore they are a separate entity.
  start_block:integer  Number of the start block.
  competitor:ref       The competitor who starts in this start block.
  run:ref              The run that the start block is valid for.
==
StartFee: The amount of money a Team has to pay to take part in all competitions of a CompetitionGroup.
  amount:decimal            The start fee that is charged under the conditions described by the references below.
  age_range:ref             The age range to which the fee applies. This is only used if StartFees do not depend on categories, or if the fee_age_dependent flag of the linked CategoryGroup is set.
  category_group:ref        The group of categories to which the fee applies. This reference is nil if fees do not depend on categories. The CategoryGroup must be linked to the same CompetitionGroup that the StartFee is linked to.  
  competition_group:ref     The group of competitions for which the fee is a total start fee. This reference is nil if fees do not depend on the competition.
  registration_deadline:ref The deadline until which this start fee is valid.
  country_group:ref          The group of countries whose teams are paying this start fee.
==
StartTime: The time at which a competitor starts in a run.
  start_time:time       The time, relative to the event's zero time, at which the competitor starts in the run.
  competitor:ref        The competitor in question.
  run:ref               The affected run.
==
Team: A group of one or more Competitors which takes part in a group of competitions.
  name:string                 An arbitrary team name, defined by the team leader.
  registration_time:datetime  The instant at which the team was registered. This is used to determine which start fee is applied, if start fees depend on the deadline.
  paid_by_club:boolean        This is set to true if the registration was made through the club, by an entitled member who has the permission to register teams on behalf of the club.
                              Note: - To let a club pay for teams, the registration must be opened through the club's page. Teams registered through the normal system cannot be billed to a club, since they are added to a PaymentGroup automatically.
                                    - All teams in a club registration must compete for the club that pays for the registration, i.e. the club of the team leader cannot be changed. (The team leader can be changed if the new leader is in the same club.)
                                    - Club registrations do not create a PaymentGroup. They can be edited by all entitled club members through the club page. (Find them through the paid_by_club flag and the team leader's competing club.)
                                    - Each club has one or more payment officers. They see the club registrations in a separate section on their payment page, and can turn them into bills. When that happens, a PaymentGroup is created, locked, and linked to the paying user.                                    
                                    - Clubs without payment officers may not make club registrations. This means that if a club has unpaid registrations, the last payment officer may not be deleted, and the club itself may not be deleted either.    
  start_fee:decimal           The StartFee amount that this team has to pay. This is a copy of the StartFee entry that applies to the team, and is used to reduce the amount of calculations needed to determine a PaymentGroup's balance.
  num1:integer                Custom data as defined by the organizer
  num2:integer
  num3:integer
  text1:string
  text2:string
  text3:string
  flag1:boolean
  flag2:boolean
  flag3:boolean
  competing_club:ref          The CompetingClub that this Team represents. This is also the club responsible for payment if paid_by_club is true.
                              The team's CompetingClub is set to the leader's CompetingClub by default, but may be set to the CompetingClub of any team member. Other clubs are not allowed.
  leader:ref(competitor)      The leader of this team.
                              The postal address and other contact information is always taken from the team leader. Furthermore, if the team needs only one chip in a competition, the team leader's chip is used.
                              Since Teams do not have Results per Run, the Results in Team competitions are assigned to the TeamLeader. Only the TotalResult is linked directly to the Team.
  nation:ref                  The nation that this Team represents. This is set to the leader's Nation by default, but may be set to the Nation of any team member.                              
  payment_group:ref           The PaymentGroup that this Team is covered by. This reference may be nil iff paid_by_club is true. (In this case, the PaymentGroup may be created by any of the club's payment officers.)
  user:ref                    The user who has registered this team, and may be responsible for paying its StartFee.
  team_pool:ref               The TeamPool that this team belongs to.
==
TeamPool: A collection of CompetitionGroups which share a pool of competitors and teams. Teams may register for individual competitions; registrations are stored as TeamRegistrations.
  name:string         A name that summarizes the competitions linked to the TeamPool.
  <no attributes or references>
==
TeamRegistration: A registration of a team for a competition, specifying the team's category.
  team:ref         The team that is registered.
  competition:ref  The competition it is registered for.
  category:ref     The category it is competing in.
==
TotalResult: A total score or time that can be calculated from all the Results of a Team in a Competition. This data is used to create the overall result list of a Competition.
  Example: In the "Swiss O Week", a Team's TotalResult is calculated from its six Results as follows: The times of the four Results with the best rank are added up. (In the "Swiss O Week", each Team consists of one Competitor.)
  total_time:integer  The Team's total run time in milliseconds.
  score:integer       A score that has been calculated from the Competition's Results using a Competition-specific algorithm.
  rank:integer        The rank of the Team on the overall result list.
  team:ref            The Team that has accomplished this result.
  competition:ref     The competition that this result belongs to.
==
User: A person who has created an account on o-events.net.
  username:string            A nickname that can be used to log in. The e-mail address is also accepted as a login name.
  email:string		     The email address of the user.
  hashed_password:string     A hash that is used to verify the password entered at login.
  salt:string                The salt that was used to generate the hashed_password.
  password_reset_code:string An alphanumeric code that has been sent to the user as part of the password reset link in a "forgotten password" e-mail. It can be used to reset the password.
                             The code is generated when an account is created and when the password is reset using the current code. If a user requests a "forgotten password" e-mail several times, the code remains unchanged.
  license_number:string      Country-specific identification number or character code. This is where the "SOLV Number" is stored for Swiss users.
  region_code:string         Country-specific identifier of the user's residential region.
  sicard_number:integer      Number of the SPORTident card that this user normally runs with. Range 1...16777216
  first_name:string          Self-explanatory...
  last_name:string
  phone:string               The phone field may be used for any kind of phone where the user wishes to be contacted by event organizers.
  address_line_1:string
  address_line_2:string
  zipcode:string
  city:string
  province:string            State, province, canton etc. (may be part of the postal address)
  sex:string                 'M' or 'F'  
  birthdate_y:integer        Four-digit year of birth. This is stored separately from the date since the date may not always be available.
  birthdate_m:integer        Month of birth.
  birthdate_d:integer        Day of birth. 
  country:ref                Country of residence.
  nation:ref(country)        Nation represented by the user.
==

